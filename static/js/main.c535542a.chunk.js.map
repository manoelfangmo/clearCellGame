{"version":3,"sources":["components/modal/Modal.jsx","components/scoreBoard/ScoreBoard.jsx","components/gameOver/GameOver.jsx","components/grid/Grid.jsx","App.jsx","index.js"],"names":["Modal","open","onClose","width","length","configGrid","configSpeed","useState","state","setState","lengthList","i","push","widthList","handleChange","e","name","target","value","console","log","ReactDom","createPortal","className","action","htmlFor","onChange","map","d","index","onClick","type","document","getElementById","ScoreBoard","score","gameOver","window","location","reload","Grid","isOpen","setIsOpen","startGame","setStartGame","setLength","setWidth","setScore","row","col","clicked","coordinates","setCoordinates","setGameOver","speed","setSpeed","addCell","x","y","cellProperties","id","column","style","backgroundColor","set","newValue","grid","setGrid","gridStyle","gridTemplateColumns","gridTemplateRows","useEffect","columnCount","rowCount","createMap","colors","randomColor","colorIndex","Math","floor","random","isGameOver","lastRow","intervalId","setInterval","nextAnimationStep","clearInterval","gridCopy","JSON","parse","stringify","newGrid","j","isOutOfBounds","outOfBounds","rowIsEmpty","rowNum","tempScore","prevScore","breakPoint","prevGrid","processCell","cols","cells","newLength","newWidth","Number","newSpeed","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c535542a.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./modal.scss\"\r\nimport ReactDom from 'react-dom'\r\nimport {useState} from \"react\"\r\nexport default function Modal({open, onClose, width, length, configGrid, configSpeed}) {\r\n    const maxLength = 10;\r\n    const maxWidth = 10;\r\n    \r\n    const [state, setState] = useState({width: width, length:length})\r\n    if(!open){\r\n        return null\r\n    }\r\n    const lengthList= [];\r\n    for(let i=1; i<= maxLength; i++){\r\n        lengthList.push(i);\r\n    }\r\n    const widthList= []\r\n    for(let i=1; i<= maxWidth; i++){\r\n        widthList.push(i);\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        const name = e.target.name;\r\n        const value = e.target.value;\r\n\r\n       \r\n        state[name] = value;\r\n        setState({...state})\r\n        console.log(\"state\", state)\r\n    }\r\n    \r\n    const handleSubmit = ()=> {\r\n        onClose();\r\n        configGrid(state.length, state.width);\r\n    }\r\n    const handleSpeedChange = (e) => {\r\n        const name = e.target.value;\r\n\r\n        if (name === \"Hard\"){\r\n            configSpeed(500)\r\n        }else if (name === \"Medium\"){\r\n            configSpeed(750)\r\n        }else{\r\n            configSpeed(1000)\r\n        }\r\n\r\n    }\r\n\r\n    return ReactDom.createPortal(\r\n        <>\r\n                <div className=\"overlay\"></div>\r\n                <div className=\"modal\">\r\n                <form action=\"\">\r\n                    <label htmlFor=\"length\">Length:</label>\r\n                        <select name=\"length\" value={state.length} onChange={handleChange}>\r\n                            {lengthList.map((d,index) => (\r\n                                <option value={d}>{d}</option>\r\n                            ))}\r\n                        </select> <br />\r\n\r\n                    <label htmlFor=\"width\">Width:  </label>\r\n                        <select name=\"width\" value={state.width} onChange={handleChange}>\r\n                            {widthList.map((d) => (\r\n                                <option value={d}>{d}</option>\r\n                            ))}\r\n\r\n                        </select> <br />\r\n\r\n                    <label htmlFor=\"speed\">Speed:  </label>\r\n                        <select name=\"length\" value=\"Easy\" onChange={handleSpeedChange}>\r\n                                <option value=\"Easy\">Easy</option>\r\n                                <option value=\"Medium\">Medium</option>\r\n                                <option value=\"Hard\">Hard</option>\r\n                        </select> <br />\r\n                        \r\n                </form>    \r\n                <button onClick={handleSubmit} type=\"submit\">Submit</button>\r\n\r\n                </div>\r\n        \r\n        </>,\r\n        document.getElementById('portal')\r\n\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport \"./scoreBoard.scss\"\r\n\r\nexport default function ScoreBoard({score}) {\r\n    return (\r\n            <h1 className=\"scoreBoard\">{score}</h1>\r\n            \r\n\r\n    )\r\n}\r\n","import React from 'react'\r\nimport \"./gameOver.scss\"\r\nimport ReactDom from 'react-dom'\r\nimport {useState} from \"react\"\r\nexport default function Modal({gameOver}) {\r\n    if(!gameOver){\r\n        return null;\r\n    }\r\n    function refreshPage() {\r\n        window.location.reload(false);\r\n      }\r\n\r\n    return ReactDom.createPortal(\r\n        <>\r\n                <div className=\"overlay1\"></div>\r\n                <div className=\"modal1\">\r\n                <button onClick={refreshPage} className=\"button\">Restart</button>\r\n                \r\n\r\n                </div>\r\n        \r\n        </>,\r\n        document.getElementById('portal1')\r\n\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport \"./grid.scss\"\r\nimport {useState, useEffect} from \"react\"\r\nimport Modal from \"../modal/Modal\"\r\nimport ScoreBoard from '../scoreBoard/ScoreBoard'\r\nimport GameOver from '../gameOver/GameOver'\r\n\r\n\r\n\r\n\r\nexport default function Grid() {\r\n\r\n    \r\n    const [isOpen, setIsOpen] = useState(true);\r\n    const [startGame, setStartGame] = useState(false);\r\n    const [length, setLength] = useState(10);\r\n    const [width, setWidth] = useState(5);\r\n    const [score, setScore] = useState(0);\r\n    const [coordinates, setCoordinates] = useState({row:0,col:0,clicked:false})\r\n    const [gameOver, setGameOver] = useState(false)\r\n    const [speed, setSpeed] = useState(1000)\r\n\r\n    const configGrid = (newLength, newWidth) => {\r\n        setLength(Number(newLength));\r\n        setWidth(Number(newWidth));\r\n        \r\n    }\r\n    const configSpeed = (newSpeed) => {\r\n        setSpeed(Number(newSpeed));\r\n    }\r\n    \r\n    function createMap(columnCount, rowCount) {\r\n        const map = [];\r\n        for (let x = 0; x < columnCount; x++) {\r\n          map[x] = []; // set up inner array\r\n          for (let y = 0; y < rowCount; y++) {\r\n             addCell(map, x, y);\r\n          }\r\n        }\r\n        return map;\r\n    }\r\n     \r\n    \r\n    function addCell(map, x, y) {\r\n        const cellProperties = {className: \"cell\", id: \"cell\" + x +y, row: x, column: y, style:{backgroundColor:\"white\",set: (newValue) => {\r\n            this.backgroundColor = newValue;\r\n        } }};\r\n        \r\n         map[x][y] = cellProperties ; // create a new object on x and y\r\n         \r\n    }\r\n    // {className: \"cell\", id: \"cell\"+x + y, style:{backgroundColor: \"white\"}}\r\n    \r\n    \r\n    const [grid, setGrid] = useState([]);\r\n\r\n    const gridStyle = { \r\n        gridTemplateColumns: \" \",\r\n        gridTemplateRows: \" \",\r\n    \r\n    }\r\n    for (let i=0; i< length; i++){\r\n        gridStyle.gridTemplateRows += \"7% \"\r\n    }\r\n    for (let i=0; i< width; i++){\r\n        gridStyle.gridTemplateColumns += \"7% \"\r\n    }\r\n\r\n    useEffect(() => {\r\n        setGrid(createMap(length,width))\r\n        \r\n    },[length,width])\r\n\r\n\r\n    \r\n\r\n    const colors = [ \"blue\", \"red\", \"yellow\", \"green\"];\r\n    const randomColor = () => { \r\n        const colorIndex = Math.floor((Math.random() * colors.length));\r\n        const style = {backgroundColor: colors[colorIndex]};\r\n        return style\r\n           \r\n    \r\n    }\r\n\r\n\r\n    const  isGameOver = () => {\r\n        let gameOver = false;\r\n        const lastRow = length-1;\r\n        for(let i = 0; i< width; i++){      \r\n            if(grid[lastRow][i].style.backgroundColor !== \"white\"){\r\n                setGameOver(true)\r\n                gameOver = true;\r\n                break;\r\n                \r\n            }\r\n        }\r\n        return gameOver;\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n    \r\n        if(startGame && isGameOver() === false){\r\n            const intervalId = setInterval(() => {\r\n                nextAnimationStep();\r\n                \r\n        \r\n            }, speed);\r\n                return () => {clearInterval(intervalId); \r\n           }\r\n        }\r\n    \r\n    }, [startGame, grid])\r\n  \r\n    const nextAnimationStep = () => {\r\n        if(isGameOver() === false){\r\n            const gridCopy = JSON.parse(JSON.stringify(grid))\r\n            const newGrid = JSON.parse(JSON.stringify(grid))\r\n        \r\n        \r\n\r\n            for(let i = 0; i< length-1; i++) {\r\n                 newGrid[i+1] = JSON.parse(JSON.stringify(gridCopy[i]))\r\n                for(let j= 0; j< width; j++) {\r\n                    newGrid[i+1][j].row = gridCopy[i+1][j].row;\r\n                }\r\n            }\r\n            \r\n            for(let i = 0; i< width; i++){\r\n                newGrid[0][i].style = randomColor();\r\n             } \r\n\r\n             \r\n            setGrid(newGrid);\r\n                     \r\n            // setGrid(newGrid)\r\n            \r\n        }\r\n    }\r\n\r\n    const processCell = (row, col) =>{\r\n        console.log(\"process\", row, col)\r\n        const gridCopy = JSON.parse(JSON.stringify(grid))\r\n        let tempScore = 0;\r\n        if(gridCopy[row][col].style.backgroundColor !== \"white\") {\r\n\t\t\tif(\t!isOutOfBounds(row-1,col)&&\r\n            gridCopy[row-1][col].style.backgroundColor === gridCopy[row][col].style.backgroundColor) {\r\n\t\t\t\tgridCopy[row-1][col].style = {backgroundColor: \"white\"};\r\n\t\t\t\ttempScore++;\r\n\t\t\t}\r\n\r\n\t\t\tif(!isOutOfBounds(row+1,col) &&\r\n            gridCopy[row+1][col].style.backgroundColor ===  gridCopy[row][col].style.backgroundColor) {\r\n\t\t\t\tgridCopy[row+1][col].style = {backgroundColor: \"white\"};\r\n\t\t\t\ttempScore++;\r\n\t\t\t}\r\n\r\n\t\t\tif(!isOutOfBounds(row-1,col-1) &&\r\n            gridCopy[row-1][col-1].style.backgroundColor === gridCopy[row][col].style.backgroundColor) {\r\n\t\t\t\tgridCopy[row-1][col-1].style = {backgroundColor: \"white\"};\r\n\t\t\t\ttempScore++;\r\n\t\t\t}\r\n\r\n\t\t\tif(!isOutOfBounds(row+1,col+1) &&\r\n            gridCopy[row+1][col+1].style.backgroundColor === gridCopy[row][col].style.backgroundColor) {\r\n\t\t\t\tgridCopy[row+1][col+1].style = {backgroundColor: \"white\"};\r\n\t\t\t\ttempScore++;\r\n\t\t\t}\r\n\r\n\t\t\tif(!isOutOfBounds(row,col-1) &&\r\n             gridCopy[row][col-1].style.backgroundColor === gridCopy[row][col].style.backgroundColor) {\r\n\t\t\t\tgridCopy[row][col-1].style = {backgroundColor: \"white\"};\r\n\t\t\t\ttempScore++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif(!isOutOfBounds(row,col+1) &&\r\n            gridCopy[row][col+1].style.backgroundColor === gridCopy[row][col].style.backgroundColor) {\r\n\t\t\t\tgridCopy[row][col+1].style = {backgroundColor: \"white\"};\r\n\t\t\t\ttempScore++;\r\n\t\t\t}\r\n\r\n\t\t\tif(!isOutOfBounds(row+1,col-1) &&\r\n            gridCopy[row+1][col-1].style.backgroundColor === gridCopy[row][col].style.backgroundColor) {\r\n\t\t\t\tgridCopy[row+1][col-1].style = {backgroundColor: \"white\"};\r\n\t\t\t\ttempScore++;\r\n\t\t\t}\r\n\r\n\t\t\tif(!isOutOfBounds(row-1,col+1) &&\r\n            gridCopy[row-1][col+1].style.backgroundColor === gridCopy[row][col].style.backgroundColor ) {\r\n\t\t\t\tgridCopy[row-1][col+1].style = {backgroundColor: \"white\"};\r\n\t\t\t\ttempScore++;\r\n\t\t\t}\r\n\t\t\tgridCopy[row][col].style = {backgroundColor: \"white\"};\r\n            tempScore++\r\n            \r\n    \r\n\r\n            setScore((prevScore)=> prevScore + tempScore)\r\n                \r\n\r\n\t\t}\r\n        for(let i = length-2; i > 0; i--){\r\n            if(rowIsEmpty(i, gridCopy) === true){\r\n                console.log(\"row empty\", i)\r\n                for(let breakPoint = i; breakPoint < length-1; breakPoint++){\r\n                    console.log(\"copying row\", breakPoint+1,\"to\", breakPoint)\r\n                    console.log(\"setting row\", breakPoint+1, \"to white\")\r\n                    for(let j = 0; j < width; j++){\r\n                        gridCopy[breakPoint][j] = JSON.parse(JSON.stringify(gridCopy[breakPoint+1][j]));\r\n                        gridCopy[breakPoint][j].row = breakPoint;\r\n                        gridCopy[breakPoint+1][j].style = {backgroundColor: \"white\"};\r\n                    }\r\n                }\r\n            } else {\r\n                console.log(\" row not empty\", i)\r\n            }\r\n        }\r\n        setGrid((prevGrid)=> gridCopy)\r\n    }\r\n    const isOutOfBounds = (row, col) => {\r\n\t\tlet outOfBounds = false;\r\n\t\tif(row < 0 || row >= length) {\r\n\t\t\toutOfBounds = true;\r\n\t\t}else if(col < 0 || col >= width) {\r\n\t\t\toutOfBounds = true;\r\n\t\t}\r\n\t\treturn outOfBounds;\r\n\r\n\t}\r\n\r\n    const rowIsEmpty = (rowNum, grid) => {\r\n\t\tfor (let i = 0; i< width; i++) {\r\n\t\t\tif(grid[rowNum][i].style.backgroundColor !== \"white\") {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n    useEffect(() => {\r\n        if(coordinates.clicked){\r\n            processCell(coordinates.row,coordinates.col)\r\n        }\r\n    \r\n    }, [coordinates])\r\n\r\n   \r\n\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"grid\" style={gridStyle}>\r\n                 {grid.map((cols) => (\r\n                     cols.map((cells) => (\r\n                        <span className={cells.className} style={cells.style}\r\n                        onClick={() => setCoordinates({row: cells.row , col: cells.column, clicked: true})}\r\n                        // onClick={(a, b,c, d, e) => console.log(\"rowNUm\", a, b, c, d,e)}\r\n                         id={cells.id}\r\n                        ></span>\r\n                     ))\r\n                     \r\n                 ))}\r\n\r\n            </div>\r\n            <button onClick={()=> setIsOpen(true)} className=\"settings\">Game Settings</button>\r\n            <button onClick={()=> setStartGame(true)}className=\"start\">Start Game</button>\r\n            <Modal open={isOpen} onClose={()=> setIsOpen(false)} length={length} \r\n             width={width} configGrid={configGrid} configSpeed={configSpeed} />\r\n            <ScoreBoard score={score} />\r\n            <GameOver gameOver={gameOver} />\r\n        </>\r\n            \r\n\r\n\r\n      \r\n    )\r\n}\r\n","import './App.scss';\nimport Grid from './components/grid/Grid';\n\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"app\">\n        <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}